   {props.drugs.map((drug) => (
                <DrugItem
                    key={drug.id}
                    title={drug.title}
                    desc={drug.desc}
                    amount={drug.amount}
                    isPopular={drug.isPopular}
                />
            ))}


Imagine you have a person object with the following properties:
const person = {
  firstName: "Lindsay",
  lastName: "Criswell",
  city: "NYC"
}
Before ES6, you had to access each property individually:

console.log(person.firstName) // Lindsay
console.log(person.lastName) // Criswell
console.log(person.city) // NYC
Destructuring lets us streamline this code:
const { firstName, lastName, city } = person;
is equivalent to
const firstName = person.firstName
const lastName = person.lastName
const city = person.city

// const [firstElement, secondElement] = list;
// is equivalent to:
// const firstElement = list[0];
// const secondElement = list[1];

// This capability is similar to features present in languages such as Perl and Python.

// Examples
// Array destructuring
// Basic variable assignment
// const foo = ['one', 'two', 'three'];

// const [red, yellow, green] = foo;
// console.log(red); // "one"
// console.log(yellow); // "two"
// console.log(green); // "three"
  // console.log(props);
            


New from in app.js
---

const [drugs, setDrugs] = useState(STATIC_DRUD_DATA);


  const addDrugHandler = (drug) => {
    console.log('In App.js');
    console.log(drug);
    setDrugs((prevDrug) => {
      return [drug, ...prevDrug];
    });
  };

